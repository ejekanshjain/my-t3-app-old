generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    @@map("Examples")
}

model User {
    id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    name          String
    email         String    @unique
    emailVerified DateTime? @db.Timestamptz()
    image         String?   @db.Text
    createdAt     DateTime  @default(now()) @db.Timestamptz()
    updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz()

    accounts Account[]
    sessions Session[]

    @@map("Users")
}

model Account {
    id                 String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    userId             String   @db.Uuid
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?
    oauth_token_secret String?  @db.Text
    oauth_token        String?  @db.Text
    createdAt          DateTime @default(now()) @db.Timestamptz()
    updatedAt          DateTime @default(now()) @updatedAt @db.Timestamptz()

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("Accounts")
}

model Session {
    id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime @db.Timestamptz()
    createdAt    DateTime @default(now()) @db.Timestamptz()
    updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz()

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("Sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime @db.Timestamptz()

    @@unique([identifier, token])
    @@map("VerificationTokens")
}
